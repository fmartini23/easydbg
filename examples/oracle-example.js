// examples/oracle-example.js

/**
 * Exemplo de uso do 'easydbg' para conectar ao Oracle Database.
 *
 * ATENÇÃO: A configuração do Oracle pode ser complexa.
 *
 * Pré-requisitos:
 * 1. Ter um Oracle Database em execução e acessível (Ex: Oracle XE).
 * 2. Ter instalado os pacotes: `npm install easydbg oracledb dotenv`
 * 3. Ter o Oracle Instant Client instalado e configurado no PATH do sistema.
 *    - O driver 'oracledb' depende dessas bibliotecas nativas.
 *    - Siga o guia de instalação em: https://oracle.github.io/node-oracledb/INSTALL.html
 * 4. Ter um arquivo `.env` na raiz do projeto com as seguintes variáveis:
 *
 *    DB_CLIENT=oracle
 *    DB_USER=seu_usuario_oracle
 *    DB_PASSWORD=sua_senha
 *    DB_CONNECT_STRING=localhost:1521/XEPDB1
 *
 *    A 'DB_CONNECT_STRING' geralmente segue o formato 'host:porta/service_name'.
 *
 * 5. Ter uma tabela de exemplo no banco. Oracle usa uma sintaxe um pouco diferente:
 *    CREATE TABLE funcionarios (
 *        id NUMBER GENERATED BY DEFAULT AS IDENTITY,
 *        nome VARCHAR2(100 ) NOT NULL,
 *        cargo VARCHAR2(50),
 *        PRIMARY KEY(id)
 *    );
 *    INSERT INTO funcionarios (nome, cargo) VALUES ('Fernanda Lima', 'Desenvolvedora');
 *    INSERT INTO funcionarios (nome, cargo) VALUES ('Ricardo Pires', 'DBA');
 */

// Carrega as variáveis de ambiente do arquivo .env
require('dotenv').config();

const EasyDBG = require('../lib/index'); // Ajuste o caminho se necessário

// 1. Monta o objeto de configuração a partir das variáveis de ambiente
const oracleConfig = {
    client: process.env.DB_CLIENT,
    connection: {
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        // A forma mais comum de conexão com o Oracle é usando a "connectString"
        connectString: process.env.DB_CONNECT_STRING
    }
};

async function runOracleExample() {
    // Validação para garantir que a configuração foi carregada corretamente
    if (oracleConfig.client !== 'oracle') {
        console.log("Este exemplo é para Oracle. Por favor, defina DB_CLIENT=oracle no seu arquivo .env");
        return;
    }
    if (!oracleConfig.connection.connectString) {
        console.error("Erro: A variável de ambiente 'DB_CONNECT_STRING' é obrigatória para o exemplo do Oracle.");
        return;
    }

    const db = new EasyDBG(oracleConfig);

    try {
        // 2. Conecta ao banco de dados
        await db.connect();
        console.log('Conectado ao Oracle Database com sucesso!');

        // 3. Executa uma consulta parametrizada para encontrar um funcionário pelo cargo
        const cargoBusca = 'DBA';
        
        // O driver 'oracledb' usa placeholders no estilo :1, :2 ou :nome
        // Nosso conector 'easydbg' deve abstrair isso. Vamos usar '?' como padrão.
        // O ideal é que o conector converta '?' para o formato do Oracle.
        const employees = await db.query('SELECT id, nome, cargo FROM funcionarios WHERE cargo = :1', [cargoBusca]);

        if (employees.length > 0) {
            console.log(`Funcionários encontrados com o cargo '${cargoBusca}':`);
            // O driver 'oracledb' retorna os nomes das colunas em MAIÚSCULAS por padrão.
            // Ex: { ID: 1, NOME: 'Ricardo Pires', CARGO: 'DBA' }
            console.table(employees);
        } else {
            console.log(`Nenhum funcionário encontrado com o cargo '${cargoBusca}'.`);
        }

    } catch (error) {
        console.error('Ocorreu um erro durante a execução do exemplo Oracle:', error.message);
        console.error('\nLembrete: Verifique se o Oracle Instant Client está instalado e configurado corretamente no seu sistema.');
    } finally {
        // 4. Garante que a conexão seja fechada ao final
        if (db) {
            await db.disconnect();
            console.log('\nConexão com o Oracle fechada.');
        }
    }
}

runOracleExample();
